// This file is part of Asteria.
// Copyleft 2018, LH_Mouse. All wrongs reserved.

#include "test_utilities.hpp"
#include "../src/compiler/simple_source_file.hpp"
#include "../src/runtime/global_context.hpp"
#include <sstream>

using namespace Asteria;

int main()
  {
    static constexpr char s_source[] =
      R"__(
        const s = "abcdefg";
        var h;

        const crc32_results = [
          0x00000000, 0x312A6AA6, 0x7FD808AF, 0xE643CF1E, 0x0A321D29, 0x601B0C2E, 0xF57CB98C, 0xCEC343C6,
          0x2F0CB3EB, 0x9172ABF9, 0x35F9C1EF, 0x9CA74BF6, 0x668A8270, 0x6B210FB2, 0x6710F04C, 0x6102348A,
          0x7BFD59A7, 0x943D6D08, 0xDD3C3281, 0xE6161985, 0xD3698066, 0x673F04EA, 0x88EB3104, 0x7DAAF2A7,
          0x48BEC022, 0x89B79A00, 0xBF617236, 0x5D305635, 0x89E06440, 0x5EC16CFD, 0xB4124764, 0xD4BE25AB,
          0x2526E10C, 0xF2FF4D5D, 0x26E5E2C3, 0xF23EED74, 0xB1A94E09, 0x49199071, 0xEDBF453E, 0x20612956,
          0x55EC1316, 0xA1916629, 0xAC138A6E, 0x7575214F, 0x224A86B4, 0x3581D18D, 0x4AFABFAF, 0x9D789824,
          0x7D657170, 0xD5BBE495, 0x77921A07, 0x0BEE9980, 0xC3B03960, 0xEDD639DA, 0x3F4C73D4, 0xD65B6F20,
          0x4BC9F62A, 0x313CA3E6, 0xE2945088, 0xDEADCEA7, 0xD6F86D0F, 0x0873FB12, 0xC5F8BC6B, 0xEC44A41F,
          0x13EBD570, 0x821939AE, 0x2F6B1FB3, 0xC48476E1, 0xF4CF46DA, 0x85D92126, 0x0FD5EBB2, 0xE3353F11,
          0xA8A49184, 0x9631691D, 0x1CB2E674, 0x99D8D552, 0xBE5E8512, 0xF5982A29, 0x9DF6BAFD, 0x078C9D28,
          0x85417DEA, 0x9E52BA10, 0xF2E9CC47, 0xDF07841C, 0xD862BF0D, 0xBB731F9D, 0x39B49E90, 0x91EA7256,
          0x505D435E, 0xC0828456, 0x4965ED11, 0xED971A0A, 0x702476F0, 0xD75197FB, 0xE9C04525, 0xB158012B,
          0x9A617990, 0x84601FAE, 0x2F3724FA, 0x864993EF, 0xC2E10B6A, 0xBDDB412C, 0xEC0E3888, 0x41630B12,
          0x56962547, 0x57C7371A, 0xE6149DE3, 0xC4EEFC17, 0x9FC8116B, 0x4C57F16F, 0xC9EB6848, 0xF6288BCD,
          0xBA2B5D48, 0x3200FA7A, 0x9719EF96, 0x1747AC19, 0x8AAF8951, 0xFDA493AD, 0x7D0F4BC9, 0x1635A5C1,
          0x0E224171, 0xE4EF63A7, 0xCEDF7CD3, 0x4AD6CF79, 0x5A78619F, 0x8610F444, 0xA7BF1EA6, 0x6EA65160,
        ];
        h = std.checksum.crc32_new();
        for(each k, v : crc32_results) {
          // split
          for(var i = 0; i < k; ++i) {
            h.write(s);
          }
          assert h.finish() == v;
          // simple
          assert std.checksum.crc32(s * k) == v;
        }

        // These are MD5 checksums of "", "a", "aa", "aaa", "aaaa", and so on.
        const md5_results = [
          "D41D8CD98F00B204E9800998ECF8427E", "7AC66C0F148DE9519B8BD264312C4D64",
          "B7B68FCE5078A4C8EEC0362E78AB9E18", "24D1FB65E396E77C6A95889B02EDCDEA",
          "95CA519E244290C647712C781060980F", "68BCCF1894D70B00D1CC8C9AFA9006D2",
          "DDEA00049329198EDCA6AE3113B06169", "06D33DEEECCFC210B42DF1260D0E1F41",
          "34193810151967289007E1A8A41CF7D9", "08B839B0917E4C4E40979AD470033E22",
          "01BEC5F107817E3B66C25CF215BAF72F", "1D2F26342F9F5A2524DBAE079238DC52",
          "FEEBE5881FA2F3B2E55C9A3F1B3FC547", "B74038C10EAE24E415324208D580341F",
          "A182D1F3DBBB2EEF2C9CA0557FEB702D", "CF9125057FA59BA5BCB6ED313BBA97F4",
          "939BA051CAFE7278F16FA26D5181454F", "1319CE4ABAEEB156D4C89F606C4323A4",
          "60E2AFE19AA07E4273C55386262EBE31", "A29ECA25AF22203B6AFB40A30B2CF1AB",
          "4BA3B190ADC6B0BCE2E0D9B1F451534D", "22BCDEEBA92A0FF7155DB6455F6702A0",
          "1219C498354B3E18D38373E580A064BC", "75C88CC2F1233516CB41CD885A473D7F",
          "22876FD8FD4502F7A54CB933D170D76F", "0876D8D0121E4554C93A30C18FBBC7D7",
          "8D38716E9EDD604628059EAC77D704EF", "0425B432E7C7FBFFCF23F0D3CEFE072A",
          "956840825DC2CAED7815B9F90C042BC9", "BDCAB46D0EAFB59DA35A3692A57023B9",
          "1DBC0A399323C629D4036EE5E5ED2079", "076387CBF6C90969A4D8055669EFBF74",
          "B8A869DB5A43FD48C6B49B843B855EE7", "A2808B3C8D7BF9891D4FBC825BA356A8",
          "41B72604E1A00FC0F261983596BCD341", "C48DA296AB979BA5242E9929E90625E7",
          "AFA8CA6381C644A686DBE7FCF6057D60", "23B7F2A2BE894FF35760A0AFFB47B322",
          "CE3171B16A391374F4D5CCAA8D5C4519", "02A1C3F3C7BC1A1E8A8623113759F3B5",
          "0C8988C2D46231A09CBE5907981EA6E0", "7300E2BE0454DF4E19D49E1EB4181F45",
          "86E97D2F9A6AFDD3EEAF7DB6E61EDA32", "28277EA78C184091C1CAFEEB745E8DE8",
          "18E9B46F9586FBA8FEE641BF8BECBF17", "EA3397962BF8CCE4329E78C49C43DBED",
          "B1AFB50796ABE7189AD87FB14683C3AD", "C6FF0A9D5B635C305CF89526449CDAAE",
          "04B07B3E42D73A830A0F5B651F894C56", "126146FCD8CC23574B66508EB30858E4",
          "369E6FBDE2304111C1A4D28EF00658FD", "953431548C4069F1A1D3420469448252",
          "482BB820FD904300E6FD90963873DB50", "538CAB982B3151470BF47158E986DFFB",
          "94247FBA1525017AC6DEFF922A971BFB", "E3DCF7465533ED9DD772F304CB68A343",
          "90196C6C2955356859A7A9E7A890F20F", "67C92F044A18D900120180D5EFECC97C",
          "B00D309D890BEFA9DB08056A86C59D11", "8A29CC97B19238C5A91AA311434D5EA5",
          "F8896245D4167019C0D68C67CC6A0C83", "BA1B303E7ACF0D374908FCD1BA77D42C",
          "05E0B6D77C1CAC6E2A77E7A6CCEF986F", "082AC63B636E0DECB9D2040CBC22E1DC",
          "E92D20F7DD4B31FE01069510B40C0AF9", "EDF8E99ABCF7AD1921F18A8FC720277C",
          "879BA77B1810B537126C35095D6B25D3", "EA558E99FBA6EBF976B50509E2EAC5E2",
          "BF94961FB6AB1DF88B1A7EBE79921DC7", "58EBEBEF031F708829E4A23776A6E4A2",
          "86DD4C7876F51662CC047423DB445615", "820FEB1E73E0DD5FCBD8D5454529416C",
          "1512B3E8AA41F80FF0736FA4BC4C7C13", "7F65711DBD69752768F72A86CEFC6374",
          "155481B209E4661C883C3D2A99FEBB3A", "7952B7C98C6CBB451D9D06392D2C4EEC",
          "1633CBA5D9DC7251B0D1FDDAD5818646", "1C20BFBFF4822E4D426B00F0815100E7",
          "861F76986529C7DAE775D10C252CFA75", "D76A6A3A01117E9A0C2479E4D14902C0",
          "AAE276021802E064AE9F02791A00D647", "946EC6891FD451CDDE92FFFEB05E9B6E",
          "65CF1198DF4BA541814F958A0A27FAC6", "94B7A2817B3AF64BE74B9884C0CD81AF",
          "BBA094483232A5359E085F4E565E2014", "8552DA0EABCFC17447E8A24A72B4BB83",
          "CD486256574D514FA4292D43F5F10FA3", "567A8D2E4D03F46A7B1A5DA4BA90C28F",
          "577B66E00A937304A0954A26899C6F5C", "C3C6290F7E8E9782515B73D96E7E0E77",
          "B9608161277649A510AF3EE09A8DD3F0", "5438DBD340E1F9933F66AEA78817B51D",
          "B36B00F9C030627478BF88B8A094D221", "D9DE65F433BBA6B05EDC6E153F2C93CD",
          "F1CD21709245D40B79D07038140E85D5", "B47B7EAC82D208B433C3A20CC146A92F",
          "A2550BCD15C5D75086EBE49CF00E76A6", "38BDE99755CB939636738C6EB288C968",
          "8D927DD9233373889F4D550AE3AF1DD8", "07A2274DAD6E0C1D7775FA7562E8736F",
          "13D999FE3624A381EB8E3B9BA9A15811", "2126346CC4B8E8E8C68D9A98188F6678",
          "A3E41776EE8B5FD3B48699668C23C275", "5D25C1387B32690B0AC40E9321D1D22D",
          "52157E2422A8E8F2A0BAD2CFE2988AF7", "A94B1AC971879DC41467D3D6689011FE",
          "8D9F613C93E0B2178AE92C50CF284995", "57795BCF9E5B413D026A5D0DDAB165D1",
          "60E2F2414A6F077BAF22D441B676E23C", "7C82C6366FE41021FBF9FDECBB063D12",
          "A891E066EE85C9669084A8923F35A5B3", "C81F33FB748B069B645A760B8791D0DE",
          "DA43E225C1137DB1C4B234D5807BDDAF", "D39E3F40205644B0B0F69F3AA822E7B3",
          "345845937DC2427CBD8D747D23991C33", "FE25465B3A6CF53DF6AE4CE639D3C65B",
          "B621A8719AD46B056B03A00409F3B011", "64D73A64A1823810090029C445020C95",
          "63C0FAD58AF870D87FE6BB61E61F1ED2", "6061D93284C1516A6C99E667ED00755B",
          "8CD81F0F4536C18477DED17610840EE5", "F0F7CC1FEC0DC900B81676B432BF3BBF",
          "9F30C26BE78BBFBB3BF777A89F9BB4F8", "65C1BA86506E577A847AD6FC585DC01B",
          "8341C2174A953D048FEF4A92A38041C3", "B168C6C4896F029B2C7C5990C94E7AC8",
          "99AF26FBD01C1F26AF0D2C80855D4273", "60F727F61ACF60E7314C16E0ED9805AE",
        ];
        h = std.checksum.md5_new();
        for(each k, v : md5_results) {
          // split
          for(var i = 0; i < k; ++i) {
            h.write(s);
          }
          assert h.finish() == v;
          // simple
          assert std.checksum.md5(s * k) == v;
        }
      )__";

    std::istringstream iss(s_source);
    Simple_Source_File code(iss, rocket::sref("my_file"));
    Global_Context global;
    code.execute(global, { });
  }
