document ::=
	statement-list-opt

identifier ::=
	PCRE([A-Za-z_][0-9A-Za-z_]*)
literal ::=
	null-literal | boolean-literal | string-literal | numeric-literal
null-literal ::=
	"null"
boolean-litearl ::=
	"false" | "true"
numeric-literal ::=
	binary-literal | octal-literal | decimal-literal | hexadecimal-literal
binary-literal ::=
	PCRE(0b[01]+(\.[01]+)([pP][-+]?[0-9]+)?)
octal-literal ::=
	PCRE(0[0-7]*(\.[0-7]+)([pP][-+]?[0-9]+)?)
decimal-literal ::=
	PCRE([1-9][0-9]*(\.[0-9]+)([eE][-+]?[0-9]+)?)
hexadecimal-literal ::=
	PCRE(0[xX][0-9A-Fa-f]+(\.[0-9A-Fa-f]+)([pP][-+]?[0-9]+)?)
string-literal ::=
	PCRE("([^\\]|(\\([abfnrtv'"\\]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")

identifier-list-opt ::=
	identifier-list | ""
identifier-list ::=
	identifier ( "," identifier-list-opt | "" )
expression-list-opt ::=
	expression-list | ""
expression-list ::=
	expression ( "," expression-list-opt | "" )

initializer-list-opt ::=
	initializer-list | ""
initializer-list ::=
	initializer ( "," initializer-list-opt | "" )
key-value-list-opt ::=
	key-value-list | ""
key-value-list ::=
	( string-literal | identifier ) "=" initializer ( "," key-value-list-opt | "" )
initializer ::=
	"[" initializer-list-opt "]" | "{" key-value-list-opt "}" | expression

statement-list-opt ::=
	statement-list | ""
statement-list ::=
	statement statement-list-opt

statement ::=
	expression-statement | compound-statement |
	variable-definition | using-declaration | function-definition |
	if-statement | do-while-statement | while-statement | for-statement | foreach-statement | switch-statement |
	try-statement | defer-statement |
	label-statement | case-statement |
	goto-statement | break-statement | continue-statement | throw-statement | return-statement

expression-statement ::=
	expression-opt ";"
compound-statement ::=
	"{" statement-list-opt "}"

variable-definition ::=
	( "var" | "const" ) identifier ( "=" initializer | "" ) ";"
using-declaration ::=
	"using" identifier "for" expression ";"
function-definition ::=
	"function" identifier "(" identifier-list-opt ")" compound-statement

if-statement ::=
	"if" "(" expression ")" compound-statement ( "else" ( if-statement | compound-statement ) | "" )
do-while-statement ::=
	"do" compound-statement "while" "(" expression ")" ";"
while-statement ::=
	"while" "(" expression ")" compound-statement
for-statement ::=
	"for" "(" statement expression-opt ";" expression-opt ")" compound-statement
foreach-statement ::=
	"foreach" "(" identifier "," identifier "in" expression ")" compound-statement
switch-statement ::=
	"switch" "(" expression ")" compound-statement

try-statement ::=
	"try" compound-statement "catch" "(" identifier ")" compound-statement
defer-statement ::=
	"defer" compound-statement

label-statement ::=
	"label" identifier ":"
case-statement ::=
	"case" ( string-literal | numeric-literal ) ":"

goto-statement ::=
	"goto" identifier ";"
break-statement ::=
	"break" ";"
continue-statement ::=
	"continue" ";"
throw-statement ::=
	"throw" expression-opt ";"
return-statement ::=
	"return" expression-opt ";"

expression-opt ::=
	expression | ""
expression ::=
	prefix-expression | ( id-expression | lambda-expression | nested-expression ) expression-trailer-opt
prefix-expression ::=
	( "+" | "-" | "~" | "!" | "++" | "--" ) expression
id-expression ::=
	identifier | literal
lambda-expression ::=
	"lambda" "(" identifier-list-opt ")" compound-statement
nested-expression ::=
	"(" expression ")"
expression-trailer-opt ::=
	infix-trailer | ternary-trailer | postfix-trailer | ""
infix-trailer ::=
	( "+"  | "-"  | "*"  | "/"  | "%"  | "<<"  | ">>"  | ">>>"  | "&"  | "|"  | "^"  | "&&"  | "||"  |
	  "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "|=" | "^=" | "&&=" | "||=" |
	  "=" | "==" | "!=" | "<" | ">" | "<=" | ">=" ) expression
ternary-trailer ::=
	"?" expression-opt ":" expression
postfix-trailer ::=
	( postifix-operator-trailer | function-call-trailer | subscripting-trailer | member-access-trailer ) expression-trailer-opt
postifix-operator-trailer ::=
	"++" | "--"
function-call-trailer ::=
	"(" expression-list-opt ")"
subscripting-trailer ::=
	"[" expression "]"
member-access-trailer ::=
	"." identifier
