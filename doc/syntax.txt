document ::=
	statement-list-opt

identifier ::=
	PCRE([A-Za-z_][0-9A-Za-z_]*)
literal ::=
	null-literal | boolean-literal | string-literal | numeric-literal | nan-literal | infinity-literal
null-literal ::=
	"null"
boolean-litearl ::=
	"false" | "true"
string-literal ::=
	PCRE("([^\\]|(\\([abfnrtv'"\\]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")
numeric-literal ::=
	binary-literal | octal-literal | decimal-literal | hexadecimal-literal
binary-literal ::=
	PCRE(0b[01]+(\.[01]+)([pP][-+]?[0-9]+)?)
octal-literal ::=
	PCRE(0[0-7]*(\.[0-7]+)([pP][-+]?[0-9]+)?)
decimal-literal ::=
	PCRE([1-9][0-9]*(\.[0-9]+)([eE][-+]?[0-9]+)?)
hexadecimal-literal ::=
	PCRE(0[xX][0-9A-Fa-f]+(\.[0-9A-Fa-f]+)([pP][-+]?[0-9]+)?)
nan-literal ::=
	"nan"
infinity-literal ::=
	"infinity"

statement ::=
	expression-statement | block | variable-definition | function-definition |
	if-statement | switch-statement |
	do-while-statement | while-statement | for-statement | foreach-statement |
	try-statement | defer-statement |
	break-statement | continue-statement | throw-statement | return-statement

expression-statement ::=
	expression-opt ";"
block ::=
	"{" statement-list-opt "}"
statement-list-opt ::=
	statement-list | ""
statement-list ::=
	statement statement-list-opt
variable-definition ::=
	( "var" | "const" ) identifier equal-initailizer-opt ";"
equal-initializer-opt ::=
	"=" initializer | ""
initializer ::=
	"[" initializer-list-opt "]" | "{" key-value-list-opt "}" | expression
initializer-list-opt ::=
	initializer-list | ""
initializer-list ::=
	initializer ( "," initializer-list-opt | "" )
key-value-list-opt ::=
	key-value-list | ""
key-value-list ::=
	( string-literal | identifier ) "=" initializer ( "," key-value-list-opt | "" )
function-definition ::=
	"function" identifier "(" parameter-list-opt ")" block
parameter-list-opt ::=
	parameter-list | ""
parameter-list ::=
	identifier default-argument-initializer-opt ( "," parameter-list-opt | "" )
default-argument-initializer-opt ::=
	"=" literal | ""

if-statement ::=
	"if" expression block ( "else" else-branch | "" )
else-branch ::=
	if-statement | block
switch-statement ::=
	"switch" expression switch-block
switch-block ::=
	"{" swtich-clause-list-opt "}"
switch-clause-list-opt ::=
	switch-clause-list | ""
switch-clause-list ::=
	( switch-clause-case | switch-clause-default ) switch-clause-list-opt
switch-clause-case ::=
	"case" expression ":" statement-list-opt
switch-clause-default ::=
	"default" ":" statement-list-opt

do-while-statement ::=
	"do" block "while" expression ";"
while-statement ::=
	"while" expression block
for-statement ::=
	"for" statement expression-opt ";" expression-opt block
foreach-statement ::=
	"foreach" identifier "," identifier "in" initializer block

try-statement ::=
	"try" block "catch" identifier block
defer-statement ::=
	"defer" block

break-statement ::=
	"break" ( "switch" | "while" | "for" | "foreach" ) ";"
continue-statement ::=
	"continue" ( "while" | "for" | "foreach" ) ";"
throw-statement ::=
	"throw" expression-opt ";"
return-statement ::=
	"return" expression-opt ";"

expression-opt ::=
	expression | ""
expression ::=
	prefix-operator-expression | expression-initiator expression-trailer-opt
prefix-operator-expression ::=
	( "+" | "-" | "~" | "!" | "++" | "--" ) expression

expression-initiator ::=
	identifier | literal | lambda-expression | nested-expression
lambda-expression ::=
	"lambda" "(" parameter-list-opt ")" block
nested-expression ::=
	"(" expression ")"

expression-trailer-opt ::=
	expression-trailer | ""
expression-trailer ::=
	postfix-operator-trailer | infix-operator-trailer | ternary-trailer | assignment-trailer |
	function-call-trailer | subscripting-trailer | member-access-trailer
postifix-operator-trailer ::=
	( "++" | "--" ) expression-trailer-opt
infix-operator-trailer ::=
	( "+" | "-" | "*" | "/"  | "%"  | "<<" | ">>" | ">>>" |
	  "&" | "|" | "^" | "&&" | "||" | "==" | "!=" | "<"   | ">" | "<=" | ">=" ) expression
ternary-trailer ::=
	"?" expression-opt ":" expression
assignment-trailer ::=
	( "+=" | "-=" | "*=" | "/="  | "%="  | "<<=" | ">>=" | ">>>=" |
	  "&=" | "|=" | "^=" | "&&=" | "||=" | "="   ) expression

function-call-trailer ::=
	"(" argument-list-opt ")" expression-trailer-opt
argument-list-opt ::=
	argument-list | ""
argument-list ::=
	expression-opt ( "," argument-list-opt | "" )
subscripting-trailer ::=
	"[" expression "]" expression-trailer-opt
member-access-trailer ::=
	"." identifier expression-trailer-opt
