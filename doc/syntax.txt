document ::=
	directive-or-statement-list-opt

identifier ::=
	PCRE([A-Za-z_][0-9A-Za-z_]*)
literal ::=
	null-literal | boolean-literal | string-literal | noescape-string-literal | numeric-literal | nan-literal | infinity-literal
null-literal ::=
	"null"
boolean-litearl ::=
	"false" | "true"
string-literal ::=
	PCRE("([^\\]|(\\([abfnrtveZ0'"?\\]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")
noescape-string-literal ::=
	PCRE('[^']*?')
numeric-literal ::=
	( binary-literal | decimal-literal | hexadecimal-literal ) ( decimal-exponent-suffix | binary-exponent-suffix | "" )
binary-literal ::=
	PCRE(0[bB][01:_]+(\.[01:_]+)
decimal-literal ::=
	PCRE([0-9:_]+(\.[0-9:_]+))
hexadecimal-literal ::=
	PCRE(0[xX][0-9A-Fa-f:_]+(\.[0-9A-Fa-f:_]+))
decimal-exponent-suffix ::=
	PCRE([eE][-+]?[0-9:_]+)
binary-exponent-suffix ::=
	PCRE([pP][-+]?[0-9:_]+)
nan-literal ::=
	"nan"
infinity-literal ::=
	"infinity"

statement ::=
	block | variable-definition | constant-definition | function-definition |
	if-statement | switch-statement |
	do-while-statement | while-statement | for-statement |
	break-statement | continue-statement | throw-statement | return-statement |
	try-statement |
	expression-statement

block ::=
	"{" statement-list-opt "}"
statement-list-opt ::=
	statement-list | ""
statement-list ::=
	statement statement-list-opt
variable-definition ::=
	"var" identifier equal-initailizer-opt ";"
equal-initializer-opt ::=
	equal-initializer | ""
equal-initializer ::=
	"=" expression
constant-definition ::=
	"const" identifier equal-initailizer ";"
function-definition ::=
	"func" identifier "(" parameter-list-opt ")" statement
parameter-list-opt ::=
	parameter-list | ""
parameter-list ::=
	identifier ( "," parameter-list | "" )

if-statement ::=
	"if" "(" expression ")" statement ( "else" statement | "" )
switch-statement ::=
	"switch" "(" expression ")" switch-block
switch-block ::=
	"{" swtich-clause-list-opt "}"
switch-clause-list-opt ::=
	switch-clause-list | ""
switch-clause-list ::=
	( switch-clause-case | switch-clause-default ) switch-clause-list-opt
switch-clause-case ::=
	"case" expression ":" statement-list-opt
switch-clause-default ::=
	"default" ":" statement-list-opt

do-while-statement ::=
	"do" statement "while" "(" expression ")" ";"
while-statement ::=
	"while" "(" expression ")" statement
for-statement ::=
	"for" "(" ( for-statement-triplet | for-statement-range ) ")" statement
for-statement-triplet ::=
	( variable-definition | expression-opt ";" ) expression-opt ";" expression-opt
for-statement-range ::=
	"each" identifier "," identifier ":" expression

break-statement ::=
	"break" ( "switch" | "while" | "for" ) ";"
continue-statement ::=
	"continue" ( "while" | "for" ) ";"
throw-statement ::=
	"throw" expression-opt ";"
return-statement ::=
	"return" expression-opt ";"

try-statement ::=
	"try" statement "catch" "(" identifier ")" statement

expression-statement ::=
	expression-opt ";"
expression-opt ::=
	expression | ""
expression ::=
	prefix-operator-expression | expression-initiator expression-trailer-opt

prefix-operator-expression ::=
	( "+" | "-" | "~" | "!" | "++" | "--" | "unset" ) expression

expression-initiator ::=
	identifier | literal | "this" | closure-function | nested-expression | unnamed-array | unnamed-object
closure-function ::=
	"func" "(" parameter-list-opt ")" statement
nested-expression ::=
	"(" expression ")"
unnamed-array ::=
	"[" array-element-list-opt "]"
array-element-list-opt ::=
	array-element-list | ""
array-element-list ::=
	expression ( "," array-element-list-opt | "" )
unnamed-object ::=
	"{" key-mapped-list-opt "}"
key-mapped-list-opt ::=
	key-mapped-list | ""
key-mapped-list ::=
	( string-literal | identifier ) "=" expression ( "," key-mapped-list-opt | "" )

expression-trailer-opt ::=
	expression-trailer | ""
expression-trailer ::=
	postfix-operator-trailer | infix-operator-trailer | ternary-trailer | assignment-trailer |
	function-call-trailer | subscripting-trailer | member-access-trailer
postifix-operator-trailer ::=
	( "++" | "--" ) expression-trailer-opt
infix-operator-trailer ::=
	( "+" | "-" | "*" | "/"  | "%"  | "<<" | ">>" | "<<<" | ">>>" |
	  "&" | "|" | "^" | "&&" | "||" | "==" | "!=" | "<"   | ">"   | "<=" | ">=" ) expression
ternary-trailer ::=
	"?" expression-opt ":" expression
assignment-trailer ::=
	( "+=" | "-=" | "*=" | "/="  | "%="  | "<<=" | ">>=" | "<<<=" | ">>>=" |
	  "&=" | "|=" | "^=" | "&&=" | "||=" | "="   ) expression

function-call-trailer ::=
	"(" argument-list-opt ")" expression-trailer-opt
argument-list-opt ::=
	argument-list | ""
argument-list ::=
	expression-opt ( "," argument-list-opt | "" )
subscripting-trailer ::=
	"[" expression "]" expression-trailer-opt
member-access-trailer ::=
	"." identifier expression-trailer-opt

directive-or-statement-list-opt ::=
	directive-or-statement-list | ""
directive-or-statement-list ::=
	directive-or-statement directive-or-statement-list-opt
directive-or-statement ::=
	directive | statement

directive ::=
	export-directive | import-directive

export-directive ::=
	"export" identifier ";"
import-directive ::=
	"import" string-literal ";"
