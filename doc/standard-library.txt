### `std.debug`

`std.debug.print([args...])`

	* Prints all `args` to the standard error stream, separated by
	  spaces. A line break is appended to terminate the line.

	* Returns `true` if the operation succeeds; otherwise `null`.

`std.debug.dump(value, [indent_increment])`

	* Prints the value to the standard error stream with detailed
	  information. `indent_increment` specifies the number of spaces
	  used as a single level of indent. Its value is clamped between
	  `0` and `10` inclusively. If it is set to `0`, no line break is
	  inserted and output lines are not indented. It has a default
	  value of `2`.

	* Returns `true` if the operation succeeds; otherwise `null`.

### `std.chrono`

`std.chrono.utc_now()`

	* Retrieves the wall clock time in UTC.

	* Returns the number of milliseconds since the Unix epoch,
	  represented as an `integer`.

`std.chrono.local_now()`

	* Retrieves the wall clock time in the local time zone.

	* Returns the number of milliseconds since `1970-01-01 00:00:00`
	  in the local time zone, represented as an `integer`.

`std.chrono.hires_now()`

	* Retrieves a time point from a high resolution clock. The clock
	  goes monotonically and cannot be adjusted, being suitable for
	  time measurement. This function provides accuracy and might be
	  quite heavyweight.

	* Returns the number of milliseconds since an unspecified time
	  point, represented as a `real`.

`std.chrono.steady_now()`

	* Retrieves a time point from a steady clock. The clock goes
	  monotonically and cannot be adjusted, being suitable for time
	  measurement. This function is supposed to be fast and might
	  have poor accuracy.

	* Returns the number of milliseconds since an unspecified time
	  point, represented as an `integer`.

`std.chrono.local_from_utc(time_utc)`

	* Converts a UTC time point to a local one. `time_utc` shall be
	  the number of milliseconds since the Unix epoch.

	* Returns the number of milliseconds since `1970-01-01 00:00:00`
	  in the local time zone, represented as an `integer`.

`std.chrono.utc_from_local(time_local)`

	* Converts a local time point to a UTC one. `time_local` shall
	  be the number of milliseconds since `1970-01-01 00:00:00` in
	  the local time zone.

	* Returns the number of milliseconds since the Unix epoch,
	  represented as an `integer`.

`std.chrono.parse_datetime(time_str)`

	* Parses `time_str`, which is an ASCII string representing a time
	  point in the format `1970-01-01 00:00:00.000`, according to the
	  ISO 8601 standard; the subsecond part is optional and may have
	  fewer or more digits. There shall be no leading or trailing
	  spaces.

	* Returns the number of milliseconds since `1970-01-01 00:00:00`
	  if the time string has been parsed successfully; otherwise
	  `null`.

`std.chrono.format_datetime(time_point, [with_ms])`

	* Converts `time_point`, which represents the number of
	  milliseconds since `1970-01-01 00:00:00`, to an ASCII string in
	  the aforementioned format, according to the ISO 8601 standard.
	  If `with_ms` is set to `true`, the string will have a 3-digit
	  fractional part. By default, no fractional part is added.

	* Returns a `string` representing the time point.

`std.chrono.min_datetime([with_ms])`

	* Gets the special string that denotes the negative infinity time
	  point. Calling this function has the same effect as calling
	  `format_datetime(-0x8000000000000000, with_ms)`.

	* Returns `'1601-01-01 00:00:00'` or `'1601-01-01 00:00:00.000'`
	  according to `with_ms`.

`std.chrono.max_datetime([with_ms])`

	* Gets the special string that denotes the positive infinity time
	  point. Calling this function has the same effect as calling
	  `format_datetime(0x7FFFFFFFFFFFFFFF, with_ms)`.

	* Returns `'9999-01-01 00:00:00'` or `'9999-01-01 00:00:00.000'`
	  according to `with_ms`.

### `std.string`

`std.string.compare(text_one, text_two, [length])`

	* Performs lexicographical comparison on two byte `string`s. If
	  `length` is set to an `integer`, no more than this number of
	  bytes are compared. This function behaves like the `strncmp()`
	  function in C, except that null characters do not terminate
	  strings.

	* Returns `1` if `text_one` compares greater than `text_two`,
	  `-1` if `text_one` compares less than `text_two`, and `0` if
	  `text_one` compares equal to `text_two`.

`std.string.starts_with(text, prefix)`

	* Checks whether `prefix` is a prefix of `text`. The empty
	  `string` is considered to be a prefix of any string.

	* Returns `true` if `prefix` is a prefix of `text`; otherwise
	  `false`.

`std.string.ends_with(text, suffix)`

	* Checks whether `suffix` is a suffix of `text`. The empty
	  `string` is considered to be a suffix of any string.

	* Returns `true` if `suffix` is a suffix of `text`; otherwise
	  `false`.

`std.string.reverse(text)`

	* Reverses a byte `string`. This function returns a new `string`
	  without modifying `text`.

	* Returns the reversed `string`.

`std.string.trim(text, [reject])`

	* Removes the longest prefix and suffix consisting solely bytes
	  from `reject`. If `reject` is empty, no byte is removed. If
	  `reject` is not specified, spaces and tabs are removed. This
	  function returns a new `string` without modifying `text`.

	* Returns the trimmed `string`.

`std.string.trim_left(text, [reject])`

	* Removes the longest prefix consisting solely bytes from
	  `reject`. If `reject` is empty, no byte is removed. If `reject`
	  is not specified, spaces and tabs are removed. This function
	  returns a new `string` without modifying `text`.

	* Returns the trimmed `string`.

`std.string.trim_right(text, [reject])`

	* Removes the longest suffix consisting solely bytes from
	  `reject`. If `reject` is empty, no byte is removed. If `reject`
	  is not specified, spaces and tabs are removed. This function
	  returns a new `string` without modifying `text`.

	* Returns the trimmed string.

`std.string.to_upper(text)`

	* Converts all lowercase English letters in `text` to their
	  uppercase counterparts. This function returns a new `string`
	  without modifying `text`.

	* Returns a new `string` after the conversion.

`std.string.to_lower(text)`

	* Converts all uppercase English letters in `text` to their
	  lowercase counterparts. This function returns a new `string`
	  without modifying `text`.

	* Returns a new `string` after the conversion.

`std.string.explode(text, [delim], [limit])`

	* Breaks `text` down into segments, separated by `delim`. If
	  `delim` is `null` or an empty `string`, every byte becomes a
	  segment. If `limit` is set to a positive `integer`, there will
	  be no more segments than this number; the last segment will
	  contain all the remaining bytes of the `text`.

	* Returns an `array` containing the broken-down segments. If
	  `text` is empty, an empty `array` is returned.

	* Throws an exception if `limit` is zero or negative.

`std.string.implode(segments, [delim])`

	* Concatenates elements of an array, `segments`, to create a new
	  `string`. All segments shall be `string`s. If `delim` is
	  specified, it is inserted between adjacent segments.

	* Returns a `string` containing all segments. If `segments` is
	  empty, an empty `string` is returned.
